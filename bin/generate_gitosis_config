#!/usr/bin/perl

use strict;
use warnings;

use Config::Auto;
use Template;
use Data::Dumper;
use File::Spec::Functions qw(:ALL);
use File::Slurp;
use Git;

use FindBin;
use lib "$FindBin::Bin/../lib";

use GitWebAdmin::Schema;

my $quiet = 0;
if( $ARGV[0] and $ARGV[0] eq '-q' ){
    $quiet = 1;
}

my $config = Config::Auto::parse("$FindBin::Bin/../gitwebadmin.ini");
my $tmpl = Template->new(
  {
    INCLUDE_PATH => "$FindBin::Bin/../templates",
  });

my $db_cfg = $config->{database};
my $schema = GitWebAdmin::Schema->connect(
  "dbi:$db_cfg->{driver}:dbname=$db_cfg->{name}",
  $db_cfg->{username}, $db_cfg->{password});

my %out_cfg = ();
$out_cfg{gitosis} = $config->{gitosis};

sub strip_git {
  my $name = shift;
  $name =~ s/\.git$//;
  return $name;
}

my $groups = $schema->resultset("Groups");
print "Reading Groups:\n" unless $quiet;
while( my $grp = $groups->next ){
  print "\t".$grp->gid."\n" unless $quiet;
  $out_cfg{groups}{$grp->gid} = {
    members => [ map { $_->uid } $grp->users ],
    writable => [ map { strip_git($_->name) } $grp->w_repos ],
    readable => [ map { strip_git($_->name) } $grp->r_repos ],
  };
}

my $owners = $schema->resultset("Users");
print "Creating Owner-Groups:\n" unless $quiet;
while( my $owner = $owners->next ){
  next unless $owner->repo->count;
  print "\t".$owner->uid."\n" unless $quiet;
  $out_cfg{groups}{$owner->uid."-owner"} = {
    members => [ $owner->uid ],
    writable => [ map { strip_git($_->name) } $owner->repo ],
  };
}

my $repos = $schema->resultset("Repos");
print "Reading Repositories:\n" unless $quiet;
while( my $repo = $repos->next ){
  print "\t".$repo->name."\n" unless $quiet;
  $out_cfg{repos}{strip_git($repo->name)} = {
    description => $repo->descr,
    owner => $repo->owner->name,
    gitweb => $repo->gitweb ? 'yes' : 'no',
    daemon => $repo->daemon ? 'yes' : 'no',
  };
}

my $git = Git->repository(rel2abs($config->{gitosis}{repository}));

my $cfg_file = catfile($config->{gitosis}{repository}, "gitosis.conf");
$git->command_noisy('add', "gitosis.conf");
print "Write out configuration to $cfg_file\n" unless $quiet;
#print Dumper(\%out_cfg);
$tmpl->process('gitosis/gitosis.conf.tmpl', \%out_cfg, $cfg_file);

print "Write out public keys\n" unless $quiet;
my @old_keys = glob(catfile($config->{gitosis}{repository}, "keydir", "*.pub"));
#print "\told_keys = @old_keys\n";
my %old_keys = map { $_ => 1 } @old_keys;
my $users = $schema->resultset("Users");
while( my $usr = $users->next ){
  next unless $usr->key;
  my $key_file = catfile($config->{gitosis}{repository}, "keydir", $usr->uid.".pub");
  delete $old_keys{$key_file};
  print "\twrite $key_file\n" unless $quiet;
  write_file($key_file, $usr->key)
    or die "write_file failed: $!\n";
  $git->command_noisy('add', rel2abs($key_file));
}

foreach my $old_file (keys %old_keys){
  print "\tdelete $old_file\n" unless $quiet;
  unlink $old_file
    or die "unlink failed: $!\n";
  $git->command_noisy('rm', rel2abs($old_file));
}

$git->command_noisy('commit', '-m', "Update config from database");
