#!/usr/bin/perl
#
#  Copyright (C) 2009 Astaro AG  www.astaro.com
#  All rights reserved.
#
#  Author: Frank Lichtenheld <flichtenheld@astaro.com> 15.07.2009
#
##############################################################################

use strict;
use warnings;

use autodie;
use File::Spec::Functions;
use File::Slurp;
use Git;

use FindBin;
use lib "$FindBin::Bin/../lib";

use Dutil;
use GitWebAdmin::Schema;

my $GIT      = "/srv/git";
my $LOG      = "$GIT/repodata.log";
my $LOCK     = "$GIT/repodata.lock";

Dutil::singularize( $LOCK );
Dutil::daemonize;
Dutil::redirect( $LOG );
Dutil::install_handlers;

Dutil::log("initialized");

my $schema = GitWebAdmin::Schema->connect("dbi:Pg:dbname=gitwebadmin");
my $rs = $schema->resultset('MantisRepos');
my $real_repos = $schema->resultset('Repos');
my $branches = $schema->resultset('Branches');
my $commits = $schema->resultset('Commits');

my $started = time();
while( 1 ){

  my $time = time();
  if( ($time - $started) > (7 * 86_400) ){
    Dutil::log("weekly restart");
    exit 0;
  }

  while( my $repo = $rs->next ){
    my $path = catfile('/srv/git/repositories', $repo->name);
    next unless -d $path;

    my $rrepo = $real_repos->find($repo->id) or die;
    my %branches = map { $_->branch => $_ } $rrepo->branches;

    my $git = Git->repository($path);
    my @heads = $git->command(qw(for-each-ref refs/heads));
    foreach( @heads ){
      unless( m|^([a-f0-9]{40})\s+commit\s+refs/heads/(.+)$| ){
        die "unknown format for for-each-ref output: $_\n";
      }
      my ($sha1, $ref) = ($1, $2);
      if( not exists $branches{$ref} ){
        my $branch = $rrepo->create_related('branches',
                                            { branch => $ref, commit => $sha1 });
        Dutil::log($rrepo->name.": Added branch $ref ($sha1)");
        import_commits($git, $rrepo, $branch, $sha1);
      } else {
        my $old_sha1 = $branches{$ref}->commit;
        unless( $old_sha1 eq $sha1 ){
          $branches{$ref}->commit($sha1);
          $branches{$ref}->update->discard_changes;

          Dutil::log($rrepo->name.": Updated branch $ref ($old_sha1 -> $sha1)");

          import_commits($git, $rrepo, $branches{$ref}, $sha1, $old_sha1);
        }
      }
    }
  }
  $rs->reset;

  sleep 10;
}

sub import_commits {
  my ($git, $repo, $branch, $sha1, $old_sha1) = @_;

  my @cmd = qw(rev-list -E --grep=^\[[0-9]+\]);
  push @cmd, $sha1;
  push @cmd, "^$old_sha1" if $old_sha1;

  my @commits = $git->command(@cmd);
  foreach my $c (@commits){
    chomp $c;
    die "invalid commit $c\n" unless $c =~ /^[a-f0-9]{40}$/;
    my $commit = $commits->find_or_create(
      { rid => $repo->id, commit => $c },
      { key => 'commits_rid_key' }
    );
    $branch->add_to_commits($commit);
  }
}
