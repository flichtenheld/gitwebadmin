#!/usr/bin/perl
#
#  Copyright (C) 2009,2010 Astaro GmbH & Co. KG  www.astaro.com
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#  Author: Frank Lichtenheld <flichtenheld@astaro.com> 07.07.2009
#
##############################################################################

use strict;
use warnings;

use Net::LDAP;
use Config::Auto;
use Data::Dumper;
use Getopt::Long;

use FindBin;
use lib "$FindBin::Bin/../lib";

use GitWebAdmin::Schema;

my $config = Config::Auto::parse("$FindBin::Bin/../gitwebadmin.ini");
$config = { %$config, %{Config::Auto::parse("$FindBin::Bin/../ldap.ini")} };

my $quiet;
GetOptions("quiet|q" => \$quiet)
  or die "Failure to parse command line\n";

my $db_cfg = $config->{database};
my $schema = GitWebAdmin::Schema->connect(
  "dbi:$db_cfg->{driver}:dbname=$db_cfg->{name}"
);

my $ldap_cfg = $config->{ldap};
my $ldap = Net::LDAP->new( $ldap_cfg->{server}, scheme => $ldap_cfg->{scheme} )
  or die "$@";

my $mesg = $ldap->bind( $ldap_cfg->{bind_dn},
                        password => $ldap_cfg->{password},
  );

print "Get group git_access\n" unless $quiet;
$mesg = $ldap->search(
  base   => "OU=AstaroUserGroups,DC=intranet,DC=astaro,DC=de",
  filter => "(CN=git_access)",
  attrs  => [qw(member)],
  );


$mesg->code && die $mesg->error;
die "Group not unique\n" if $mesg->entries > 1;

my @members = map { s/^(CN=.*?),.*/$1/i; $_ } ($mesg->entries)[0]->get_value('member');
print "\tmembers = @members\n" unless $quiet;
print "Get member data\n"      unless $quiet;
$mesg = $ldap->search(
  base   => "DC=intranet,DC=astaro,DC=de",
  filter => "(&(ObjectClass=user)(|".join(' ', map { "($_)" } @members)."))",
  attrs  => [qw(cn sAMAccountName mail)],
  );

$mesg->code && die $mesg->error;

my $rs = $schema->resultset('Users');
my %uids = ();
foreach my $entry ($mesg->entries){
  my $uid = $entry->get_value('sAMAccountName');
  print "\tmember ".$entry->get_value('cn')." (uid=$uid)\n" unless $quiet;
  $rs->update_or_create({ uid => $uid,
                          name => $entry->get_value('cn'),
                          mail => $entry->get_value('mail'),
                          active => 1 });
  $uids{$uid}++;
}
$uids{gitadm}++;
$uids{gitrobot}++;
my $actives = $rs->search({ active => 1 });
while( my $user = $actives->next ){
  unless( $uids{$user->uid} ){
    $user->active(0);
    $user->admin(0);
    print "\tdisable account ".$user->uid."\n";
    $user->update;
  }
}

$ldap->unbind;
