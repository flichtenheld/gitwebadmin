#!/usr/bin/perl
#
#  Copyright (C) 2009,2010 Astaro GmbH & Co. KG  www.astaro.com
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#  Author: Frank Lichtenheld <flichtenheld@astaro.com> 07.07.2009
#
##############################################################################

use strict;
use warnings;

use autodie;
use File::Spec::Functions;
use File::Slurp;
use Git;

use FindBin;
use lib "$FindBin::Bin/../lib";

use Dutil;
use GitWebAdmin::Schema;
use GitWebAdmin::Utils;

my $GIT      = "/srv/git";
my $LOG      = "$GIT/mirror.log";
my $LOCK     = "$GIT/mirror.lock";

Dutil::singularize( $LOCK );
Dutil::daemonize;
Dutil::redirect( $LOG );
Dutil::install_handlers;

Dutil::log("initialized");

my $schema = GitWebAdmin::Schema->connect("dbi:Pg:dbname=gitwebadmin");
my $rs = $schema->resultset('ActiveRepos');
my $mantis = $schema->resultset('MantisRepos');

my $started = time();
while( 1 ){

  my $time = time();
  if( ($time - $started) > (7 * 86_400 + 50 * 60) ){
    Dutil::log("weekly restart");
    exit 0;
  }

  $rs->reset;
  while( my $repo = $rs->next ){
    next unless $repo->mirrorof;

    my $path = catfile('/srv/git/repositories', $repo->name);
    my $ts_file = catfile( $path, 'mirror_ts' );

    if( -d $path ){
      my $timestamp = '';
      if( -f $ts_file ){
        $timestamp = read_file($ts_file) || '';
        if( $timestamp
            and ($timestamp =~ /^\d+$/)
            and (($time - $timestamp) < $repo->mirrorupd) ){
          next;
        }
      }

      Dutil::log("update mirror $path (ts=$timestamp)");
      my $git = Git->repository($path);
      # update the mirror URI in case it has changed
      $git->command_noisy(qw(config remote.origin.url), $repo->mirrorof);
      $git->command_noisy(qw(fetch --verbose --update-head-ok));
      write_file($ts_file, time());
      if( $mantis->find($repo->id) ){
        Dutil::log("update Mantis data");
        GitWebAdmin::Utils::update_mantis_data($git, $repo);
      }
      Dutil::log("update complete");
      next;
    }

    Dutil::log("create mirror $path");
    system(qw(git clone --mirror), $repo->mirrorof, $path)
      and die "clone failed: $!\n";
    write_file($ts_file, time());
    Dutil::log("run gitosis post-update hook");
    my $gitdir = '/srv/git/repositories/gitosis-admin.git';
    $ENV{GIT_DIR} = $gitdir;
    system(qw(gitosis-run-hook post-update))
      and die "gitosis failed: $!\n";
    delete $ENV{GIT_DIR};
    if( $mantis->find($repo->id) ){
      Dutil::log("update Mantis data");
      my $git = Git->repository($gitdir);

      GitWebAdmin::Utils::update_mantis_data($git, $repo);
    }
    Dutil::log("clone complete");
  }

  sleep 30;
}
