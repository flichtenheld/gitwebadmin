#!/usr/bin/perl
#
#  Copyright (C) 2009,2010 Astaro GmbH & Co. KG  www.astaro.com
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#  Author: Frank Lichtenheld <flichtenheld@astaro.com> 07.07.2009
#
##############################################################################

use strict;
use warnings;

use autodie;
use File::Spec::Functions;
use File::Slurp;
use Git;
use IPC::Run qw(run timeout);
use List::Util qw(min);
use Config::Auto;
use Try::Tiny;

use FindBin;
use Cwd qw(realpath);
use lib "$FindBin::Bin/../lib";

use Dutil;
use GitWebAdmin::Schema;
use GitWebAdmin::Utils;

my $GIT      = "/srv/git";
my $LOG      = "$GIT/mirror.log";
my $LOCK     = "$GIT/mirror.lock";
my $TIMEOUT  = 600; # 10 minutes
my $ERROR_RETRY = 600;

Dutil::singularize( $LOCK );
Dutil::daemonize;
Dutil::redirect( $LOG );
Dutil::install_handlers;

Dutil::log("initialized");

my $GWA    = realpath("$FindBin::Bin/../");
my $config = Config::Auto::parse("$GWA/gitwebadmin.ini");

my $schema = GitWebAdmin::Schema->connect("dbi:Pg:dbname=gitwebadmin");
my $rs = $schema->resultset('Repos')->search({ deleted => 0 });

my $lp = $schema->resultset('LogsPush');
# fake data, we don't know what changed
my $user = $schema->resultset('Users')->find('gitadm', {key => 'users_uid_key'})
  or die "User gitadm not found in database\n";
my $upd = $lp->new({ ref => 'refs/head/master',
                     old_id => '0'x40,
                     new_id => '0'x40,
                     uid => $user->id });


my $now = 'NOW()';
my $started = time();
while( 1 ){

  my $time = time();
  if( ($time - $started) > (7 * 86_400 + 50 * 60) ){
    Dutil::log("weekly restart");
    exit 0;
  }

  $rs->reset;
  while( my $repo = $rs->next ){
    my $mirror = $repo->mirror;
    next unless $mirror;

    my $path = catfile('/srv/git/repositories', $repo->name);

    if( -d $path ){
      my $db_time = $mirror->last_check;
      my $timestamp;
      if( $db_time ){
        $timestamp = $db_time->epoch;
      }else{
        Dutil::log("no database timestamp, force update");
        $timestamp = 0;
      }
      my $intervall = $mirror->mirrorupd;
      $intervall = $ERROR_RETRY if $mirror->last_error;
      if( $timestamp
          and ($timestamp =~ /^\d+$/)
          and (($time - $timestamp) < $intervall) ){
        next;
      }

      Dutil::log("update mirror $path (ts=$timestamp)");
      chdir $path or do {
        Dutil::log("chdir failed: $!");
        next;
      };
      # update the mirror URI in case it has changed
      my $output;
      try {
        run [qw(git config remote.origin.url), $mirror->mirrorof], '>&', \$output
          or die "git config failed (exitcode $?)\n$output\n";
        run [qw(git fetch --update-head-ok)], '>&', \$output, timeout($TIMEOUT)
          or die "git fetch failed (exitcode $?)\n$output\n";
      } catch {
        #XXX: send error mail
        Dutil::log($_);
        $mirror->last_error($_);
        $mirror->last_check(\$now);
        $mirror->update;
        return;
      } or next;
      $mirror->last_error('');
      $mirror->last_check(\$now);
      Dutil::log("update branch data");
      my $git = Git->repository($path);
      if( GitWebAdmin::Utils::update_branch_data($git, $repo, $user->id) ){
        $mirror->last_updated(\$now);
      }
      $mirror->update;
      Dutil::log("update complete");
      next;
    }

    Dutil::log("create mirror $path");
    my $output;
    try {
      run [qw(git clone --mirror), $mirror->mirrorof, $path], '>&', \$output, timeout($TIMEOUT)
        or die "git clone failed (exitcode $?)\n$output\n";
    } catch {
      Dutil::log($_);
      $mirror->last_error($_);
      $mirror->last_check(\$now);
      $mirror->update;
      return;
    } or next;
    $mirror->last_error('');
    $mirror->last_check(\$now);
    $mirror->last_updated(\$now);
    $mirror->update;
    Dutil::log("run gitosis post-update hook");
    my $gitdir = '/srv/git/repositories/gitosis-admin.git';
    $ENV{GIT_DIR} = $gitdir;
    system(qw(gitosis-run-hook post-update))
      and die "gitosis failed: $!\n";
    delete $ENV{GIT_DIR};
    Dutil::log("update branch data");
    my $git = Git->repository($path);
    GitWebAdmin::Utils::update_branch_data($git, $repo);
    my @triggers = $repo->triggers;
    foreach my $trigger (@triggers){
      Dutil::log($repo->name.": Calling trigger ".$trigger->name);
      GitWebAdmin::Utils::call_trigger($config, $repo, $upd, $trigger);
    }
    Dutil::log("clone complete");
  }

  sleep 30;
}
