#!/usr/bin/perl
#
#  Copyright (C) 2009,2010 Astaro GmbH & Co. KG  www.astaro.com
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#  Author: Frank Lichtenheld <flichtenheld@astaro.com> 20.07.2009
#
##############################################################################
# General post-receive hook for the various GWA parts
##############################################################################
use strict;
use warnings;

use File::Spec::Functions qw(rel2abs catfile);
use File::Basename;
use File::Slurp;
use File::Path;
use Git;

my $prog = basename($0);

use lib '/srv/git/gitwebadmin/lib';
use GitWebAdmin::Schema;
use GitWebAdmin::Utils qw(short_id);

my $schema = GitWebAdmin::Schema->connect("dbi:Pg:dbname=gitwebadmin");
my $logs = $schema->resultset('LogsPush');

my $gitdir = rel2abs($ENV{GIT_DIR});
(my $reponame = $gitdir) =~ s;^(/srv|/var/lib)/git/repositories/;;;
$reponame =~ s;/+$;;;
my $repo = $schema->resultset('Repos')->find($reponame, {key => 'repos_name_key'})
    or die "Repository $gitdir not found in database\n";
my $gituser = $ENV{GITOSIS_USER};
my $user;
if( $gituser ){
  $user = $schema->resultset('Users')->find($gituser, {key => 'users_uid_key'})
    or die "User $gituser not found in database\n";
}

# Read all data from STDIN
##
while( <> ){
  chomp;
  my ($oldrev, $newrev, $ref) = split /\s+/, $_, 3;

  # Push logging
  ##
  $logs->create({
    rid => $repo->id,
    uid => $user->id,
    old_id => $oldrev,
    new_id => $newrev,
    ref => $ref,
  });
  print "$prog: Logged ref change $ref by $gituser (".short_id($oldrev)."..".short_id($newrev).")\n";
}

# Update branch data
my $git = Git->repository($gitdir);
GitWebAdmin::Utils::update_branch_data($git, $repo);
