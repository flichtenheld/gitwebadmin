#!/usr/bin/perl
#
#  Copyright (C) 2009 Astaro AG  www.astaro.com
#  All rights reserved.
#
#  Author: Frank Lichtenheld <flichtenheld@astaro.com> 20.07.2009
#
##############################################################################
# General post-receive hook for the various GWA parts
##############################################################################
use strict;
use warnings;

use File::Spec::Functions qw(rel2abs catfile);
use File::Basename;
use File::Slurp;
use File::Path;
use Git;
use LWP::UserAgent;
use URI::Escape;

my $prog = basename($0);

use lib '/srv/git/gitwebadmin/lib';
use GitWebAdmin::Schema;
use GitWebAdmin::Utils qw(short_id);

my $schema = GitWebAdmin::Schema->connect("dbi:Pg:dbname=gitwebadmin");
my $logs = $schema->resultset('LogsPush');
my $mantis = $schema->resultset('MantisRepos');

my $gitdir = rel2abs($ENV{GIT_DIR});
(my $reponame = $gitdir) =~ s;^(/srv|/var/lib)/git/repositories/;;;
$reponame =~ s;/+$;;;
my $repo = $schema->resultset('Repos')->find($reponame, {key => 'repos_name_key'})
    or die "Repository $gitdir not found in database\n";
my $gituser = $ENV{GITOSIS_USER};

# Read all data from STDIN
##
while( <> ){
  chomp;
  my ($oldrev, $newrev, $ref) = split /\s+/, $_, 3;

  # Push logging
  ##
  $logs->create({
    rid => $repo->id,
    uid => $gituser,
    old_id => $oldrev,
    new_id => $newrev,
    ref => $ref,
  });
  print "$prog: Logged ref change $ref by $gituser (".short_id($oldrev)."..".short_id($newrev).")\n";
}

# Update Mantis data if needed
if( $mantis->find($repo->id) ){
  my $git = Git->repository($gitdir);

  GitWebAdmin::Utils::update_mantis_data($git, $repo);
}
