#!/usr/bin/perl
#
#  Copyright (C) 2009,2010 Astaro GmbH & Co. KG  www.astaro.com
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#  Author: Frank Lichtenheld <flichtenheld@astaro.com> 07.07.2009
#
##############################################################################

use strict;
use warnings;

use autodie;
use Config::Auto;
use Template;
use Data::Dumper;
use File::Spec::Functions qw(:ALL);
use File::Slurp;
use Git;
use XML::Simple;
use LWP::UserAgent;

use FindBin;
use Cwd qw(realpath);
use lib "$FindBin::Bin/../lib";

use Dutil;
use GitWebAdmin::Schema;

my $GWA      = realpath("$FindBin::Bin/../");
my $LOG      = "$GWA/update.log";
my $LOCK     = "$GWA/update.lock";

Dutil::singularize( $LOCK );
Dutil::daemonize;
Dutil::redirect( $LOG );
Dutil::install_handlers;

Dutil::log("initialized");

my $tmpl = Template->new(
    {
	INCLUDE_PATH => "$GWA/templates",
    });

my $config = Config::Auto::parse("$GWA/gitwebadmin.ini");

my $db_cfg = $config->{database};
my $schema = GitWebAdmin::Schema->connect(
  "dbi:$db_cfg->{driver}:dbname=$db_cfg->{name}");

my $groups = $schema->resultset("Groups");
my $owners = $schema->resultset("Users")->search({ active => 1 });
my $repos = $schema->resultset("Repos");
my $mantis = $schema->resultset("Repos")->search(
  { 'repo_tags.tag' => 'mantis' }, { join => 'repo_tags', order_by => 'name' });

my $gitdir = rel2abs($config->{gitosis}{repository}, $GWA);
my $git = Git->repository($gitdir);

# filter out repositories that are never writable
my $repo_filter = { deleted => 0 };

my $started = time();
while( 1 ){

    my $time = time();
    if( ($time - $started) > (86_400 + 50 * 60) ){
	Dutil::log("daily restart");
	exit 0;
    }

    my %out_cfg = ();
    $out_cfg{gitosis} = $config->{gitosis};

    # Allow read access per ssh to all repositories that allow
    # read access per git-daemon
    $out_cfg{groups}{PUBLIC} = {
      members => [ map { $_->uid } $owners->all ],
      writable => [],
      readable => [ map { strip_git($_->name) }
                        $repos->search({ daemon => 1 }) ],
    };
#    print "Reading Groups:\n" unless $quiet;
    while( my $grp = $groups->next ){
#	print "\t".$grp->gid."\n" unless $quiet;
      $out_cfg{groups}{$grp->gid} = {
        members => [ map { $_->uid } $grp->users({ active => 1 }) ],
        writable => [ map { strip_git($_->name) }
                          $grp->w_repos($repo_filter) ],
        readable => [ map { strip_git($_->name) }
                          $grp->r_repos($repo_filter) ],
      };
    }
    $groups->reset;

#    print "Creating Owner-Groups:\n" unless $quiet;
    while( my $owner = $owners->next ){
	next unless $owner->repo($repo_filter)->count;
#	print "\t".$owner->uid."\n" unless $quiet;
	$out_cfg{groups}{$owner->uid."-owner"} = {
	    members => [ $owner->uid ],
	    writable => [ map { strip_git($_->name) } $owner->repo($repo_filter) ],
	};
    }
    $owners->reset;

#    print "Reading Repositories:\n" unless $quiet;
    while( my $repo = $repos->next ){
#	print "\t".$repo->name."\n" unless $quiet;
	$out_cfg{repos}{strip_git($repo->name)} = {
	    description => $repo->descr,
	    owner => $repo->owner->name,
	    gitweb => $repo->gitweb ? 'yes' : 'no',
	    daemon => $repo->daemon ? 'yes' : 'no',
	    forkof => $repo->forkof ? strip_git($repo->forkof->name) : '',
            branch => $repo->branch,
	};
    }
    $repos->reset;


    my $cfg_file = catfile($gitdir, "gitosis.conf");
#    print "Write out configuration to $cfg_file\n" unless $quiet;
#    print Dumper(\%out_cfg);
    $tmpl->process('gitosis/gitosis.conf.tmpl', \%out_cfg, $cfg_file)
	or die $tmpl->error;
    $git->command_noisy('add', "gitosis.conf");

#    print "Write out public keys\n" unless $quiet;
    my $keydir = catfile($gitdir, "keydir");
    mkdir $keydir unless -d $keydir;
    my @old_keys = glob(catfile($keydir, "*.pub"));
#    print "\told_keys = @old_keys\n";
    my %old_keys = map { $_ => 1 } @old_keys;
    while( my $usr = $owners->next ){
      my @keys = map { $_->key."\n" } $usr->keys({}, { order_by => 'name' });
      next unless @keys;
      my $key_file = catfile($keydir, $usr->uid.".pub");
      delete $old_keys{$key_file};
#	print "\twrite $key_file\n" unless $quiet;
      write_file($key_file, \@keys)
          or die "write_file failed: $!\n";
      $git->command_noisy('add', catfile("keydir", $usr->uid.".pub"));
    }
    $owners->reset;

    foreach my $old_file (keys %old_keys){
#	print "\tdelete $old_file\n" unless $quiet;
	unlink $old_file
	    or die "unlink failed: $!\n";
	$git->command_noisy('rm', $old_file);
    }

    eval { $git->command(qw(commit -m), '[GitWebAdmin] Update config from database') };

    $git->command(qw(push origin master));

    if( my $repolist = $config->{mantis}{repolist} ){
      my @mantis_r;
      while( my $mantis_r = $mantis->next ){
        push @mantis_r, { id => $mantis_r->id, name => $mantis_r->name,
                          descr => $mantis_r->descr,
                          branches => join(',', map{ $_->branch } $mantis_r->branches) };
      }
      $mantis->reset;
      my $xml = XMLout( { repo => \@mantis_r }, RootName => 'Repositories' );
      my $old_xml = read_file($repolist) || '';
      if( $xml ne $old_xml ){
        write_file("$repolist.new", $xml)
          or die "writing of repolist failed\n";
        rename("$repolist.new", $repolist)
          or die "rename of repolist failed\n";
        Dutil::log("Updated $repolist");
        if( my $mantisurl = $config->{mantis}{baseurl} ){
          my $ua = LWP::UserAgent->new;

          my $response = $ua->get("$mantisurl/plugin.php?page=AstaroGitIntegration/sync");

          if ($response->is_success) {
            Dutil::log("triggered mantis sync");
          }else{
            Dutil::log("mantis sync failed: ".$response->status_line);
          }
        }
      }
    }

    sleep 10;
}

sub strip_git {
  my $name = shift;
  $name =~ s/\.git$//;
  return $name;
}
