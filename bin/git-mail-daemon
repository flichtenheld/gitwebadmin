#!/usr/bin/perl
#
#  Copyright (C) 2009,2010 Astaro GmbH & Co. KG  www.astaro.com
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#  Author: Frank Lichtenheld <flichtenheld@astaro.com> 07.07.2009
#
##############################################################################

use strict;
use warnings;

use autodie;
use File::Spec::Functions;
use Config::Auto;

use FindBin;
use Cwd qw(realpath);
use lib "$FindBin::Bin/../lib";;

use Dutil;
use GitWebAdmin::Schema;
use GitWebAdmin::Utils;

my $GIT      = "/srv/git";
my $LOG      = "$GIT/notifications.log";
my $LOCK     = "$GIT/notifications.lock";

Dutil::singularize( $LOCK );
Dutil::daemonize;
Dutil::redirect( $LOG );
Dutil::install_handlers;

Dutil::log("initialized");

my $GWA    = realpath("$FindBin::Bin/../");
my $config = Config::Auto::parse("$GWA/gitwebadmin.ini");

my $schema = GitWebAdmin::Schema->connect("dbi:Pg:dbname=gitwebadmin");
my $rs = $schema->resultset('LogsPush')->search({notified => 0});

my $started = time();
while( 1 ){

    my $time = time();
    if( ($time - $started) > (7 * 86_400 + 50 * 60) ){
	Dutil::log("weekly restart");
	exit 0;
    }

    $rs->reset;
    while( my $row = $rs->next ){
	my $repo = $row->rid;
	my $path = catfile('/srv/git/repositories', $repo->name);

	$ENV{GIT_DIR} = $path;

        my $update_id = $row->ref." (".$row->old_id."->".$row->new_id.")";

        my @triggers = $repo->triggers;
        foreach my $trigger (@triggers){
          Dutil::log($repo->name.": Calling trigger ".$trigger->name);
          GitWebAdmin::Utils::call_trigger($config, $repo, $row, $trigger);
        }

	my @recipients = map { $_->mail } $repo->subscribers({ active => 1 });
	if( @recipients ){
          CORE::open my $fh, '-|', ('/srv/git/hooks/post-receive-email',
                                    $row->ref, $row->old_id, $row->new_id)
	    or die "post-receive-email failed: $!\n";

          my $mail = '';
          my $count = 0;
          while( my $line = <$fh> ){
            $mail .= $line;
            if( ++$count > 10_000_000 ){
              # abort if mail gets too large
              last;
            }
          }
          close $fh
	    or die "post-receive-email failed: $!\n";

          if( $count > 10_000_000 or length($mail) > 50_000_000 ){
            Dutil::log($repo->name.": Mail too large for $update_id");
            goto FINISHED;
          }

          # post-receive-email will ignore some refs (e.g. remotes)
          unless( $mail ){
            Dutil::log($repo->name.": No mail generated about $update_id");
            goto FINISHED;
          }

          CORE::open my $out, '|-', (qw(/usr/sbin/sendmail -i -f),
                                     $row->uid->uid.'@git.intranet.astaro.de', @recipients)
            or die "sendmail failed: $!\n";
          print $out $mail;
          close $out
            or die "sendmail failed: $!\n";

          Dutil::log($repo->name.": Sent mail about $update_id");
          Dutil::log("Recipients: @recipients");
	}else{
          Dutil::log($repo->name.": No mail sent about $update_id");
          Dutil::log("No Recipients");
	}

      FINISHED:
	$row->notified(1);
	$row->update->discard_changes;
    }

    sleep 10;
}
