#!/usr/bin/env perl
#
#  Copyright (C) 2009 Astaro AG  www.astaro.com
#  All rights reserved.
#
#  Author: Frank Lichtenheld <flichtenheld@astaro.com> 08.09.2009
#
##############################################################################

use strict;
use warnings;

use autodie;
use File::Spec::Functions;
use File::Slurp;
use Git;

use FindBin;
use lib "$FindBin::Bin/../lib";

use Dutil;

my $GIT      = "/srv/git";
my $LOG      = "$GIT/mirror.log";
my $LOCK     = "$GIT/mirror.lock";

my $repo_name = $ARGV[0];

Dutil::singularize( $LOCK );
Dutil::daemonize;
Dutil::redirect( $LOG );
Dutil::install_handlers;

Dutil::log("initialized");

my $path = catfile('/srv/git/repositories', $repo_name);
my $url = 'git://git.intranet.astaro.de/'. $repo_name;
my $ts_file = catfile( $path, 'mirror_ts' );

my $minimum_intervall = 60;

if( -d $path ){
  my $timestamp = '';
  my $time = time();
  if( -f $ts_file ){
    $timestamp = read_file($ts_file) || '';
    if( $timestamp
        and ($timestamp =~ /^\d+$/)
        and (($time - $timestamp) < $minimum_intervall) ){
      Dutil::log("skip mirror update, too fast (ts=$timestamp)");
      exit;
    }
  }

  Dutil::log("update mirror $path (ts=$timestamp)");
  my $git = Git->repository($path);
  # update the mirror URI in case it has changed
  $git->command_noisy(qw(config remote.origin.url), $url);
  $git->command_noisy(qw(fetch --verbose --update-head-ok));
  $git->command_noisy(qw(remote prune origin));
  write_file($ts_file, time());
  Dutil::log("update complete");
  exit;
}

Dutil::log("create mirror $path");
system(qw(git clone --mirror), $url, $path)
  and die "clone failed: $!\n";
write_file($ts_file, time());
Dutil::log("clone complete");
