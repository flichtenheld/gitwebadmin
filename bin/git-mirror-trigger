#!/usr/bin/env perl
#
#  Copyright (C) 2009,2010 Astaro GmbH & Co. KG  www.astaro.com
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#  Author: Frank Lichtenheld <flichtenheld@astaro.com> 08.09.2009
#
##############################################################################

use strict;
use warnings;

use autodie;
use File::Spec::Functions;
use File::Slurp;
use Git;

use FindBin;
use lib "$FindBin::Bin/../lib";

use Dutil;

my $GIT      = "/srv/git";
my $LOG      = "$GIT/mirror.log";
my $LOCK     = "$GIT/mirror.lock";

my $repo_name = $ARGV[0];

Dutil::singularize( $LOCK );
Dutil::daemonize;
Dutil::redirect( $LOG );
Dutil::install_handlers;

Dutil::log("initialized");

my $path = catfile('/srv/git/repositories', $repo_name);
my $url = 'git://git.intranet.astaro.de/'. $repo_name;
my $ts_file = catfile( $path, 'mirror_ts' );

my $minimum_intervall = 60;

if( -d $path ){
  my $timestamp = '';
  my $time = time();
  if( -f $ts_file ){
    $timestamp = read_file($ts_file) || '';
    if( $timestamp
        and ($timestamp =~ /^\d+$/)
        and (($time - $timestamp) < $minimum_intervall) ){
      Dutil::log("skip mirror update, too fast (ts=$timestamp)");
      exit;
    }
  }

  Dutil::log("update mirror $path (ts=$timestamp)");
  my $git = Git->repository($path);
  # update the mirror URI in case it has changed
  $git->command_noisy(qw(config remote.origin.url), $url);
  $git->command_noisy(qw(fetch --verbose --update-head-ok));
  $git->command_noisy(qw(remote prune origin));
  write_file($ts_file, time());
  Dutil::log("update complete");
  exit;
}

Dutil::log("create mirror $path");
system(qw(git clone --mirror), $url, $path)
  and die "clone failed: $!\n";
write_file($ts_file, time());
Dutil::log("clone complete");
