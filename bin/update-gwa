#!/usr/bin/perl
#
#  Copyright (C) 2009,2010 Astaro GmbH & Co. KG  www.astaro.com
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#  Author: Frank Lichtenheld <flichtenheld@astaro.com> 20.07.2009
#
##############################################################################
# General update hook for the various GWA parts
##############################################################################
use strict;
use warnings;

use File::Spec::Functions qw(rel2abs);
use Git;

use constant SHA_UNDEF => '0' x 40;

use lib '/srv/git/gitwebadmin/lib';
use GitWebAdmin::Schema;
use GitWebAdmin::ACL qw(check_acl);

my $schema = GitWebAdmin::Schema->connect("dbi:Pg:dbname=gitwebadmin");

my $gitdir = rel2abs($ENV{GIT_DIR});
(my $reponame = $gitdir) =~ s;^(/srv|/var/lib)/git/repositories/;;;
$reponame =~ s;/+$;;;
my $repo = $schema->resultset('Repos')->find($reponame, {key => 'repos_name_key'})
    or die "Repository $reponame not found in database\n";
my $gituser = $ENV{GITOSIS_USER};

my $user;
if( $gituser ){
  $user = $schema->resultset('Users')->find($gituser, {key => 'users_uid_key'})
    or die "User $gituser not found in database\n";
}else{
  # We do not limit local pushes
  exit 0;
}

my ($ref, $old_sha1, $sha1) = @ARGV;
my $update_type = 'update';
if( $sha1 eq SHA_UNDEF ){
  $update_type = 'delete';
}elsif( $old_sha1 eq SHA_UNDEF ){
  $update_type = 'create';
}
if( $update_type eq 'update' ){
  my $git = Git->repository($gitdir);
  my @merge_base = $git->command('merge-base', $old_sha1, $sha1);
  if( $merge_base[0] ne $old_sha1 ){
    $update_type = 'replace';
  }
}

my %params = (
  user => $user,
  repo => $repo,
  action => $update_type,
  ref => $ref,
  );

if( check_acl($schema, \%params) ne 'allow' ){
  die "Update was denied by ACLs\n";
}


